# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options


class Test_Skane():
    def setup_method(self, method):
        options = Options()
        # options.add_argument('--headless') #comment this out to view the tests
        options.add_argument("--window-size=1920,1080")
        self.driver = webdriver.Chrome(options=options)
        self.vars = {}
        self.driver.get("https://www.skanetrafiken.se/")
        self.driver.set_window_size(1900, 1020)

        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((
            By.XPATH, '//*[@id="CybotCookiebotDialogBodyButtonAccept"]'))).click()  # find the path for the cookies

    def teardown_method(self, method):
        self.driver.quit()

    def test_searchtrip(self):
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".st-main-menu__item:nth-child(1) span").click()
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.ID, "fromDestinationAutocompleteCombobox"))).click()

        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="main-content"]/div[1]/div/div/div[1]/div[1]/div/div'))).click()

        self.driver.find_element(By.ID, "fromDestinationAutocompleteCombobox").send_keys("Lund C")
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="fromDestinationOption-0"]'))).click()
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.ID, "toDestinationAutocompleteCombobox"))).click()

        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="main-content"]/div[1]/div/div/div[1]/div[2]'))).click()

        self.driver.find_element(By.ID, "toDestinationAutocompleteCombobox").send_keys("Malmö C")
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="toDestinationOption-0"]'))).click()
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.ID, "searchButton"))).click()

        self.driver.implicitly_wait(10)

        assert self.driver.find_element(By.XPATH,
                                        "//*[@id=\"main-content\"]/div[2]/div/div/div/div[1]/div[2]/div[1]/div/div/div[2]/div").text == "Lund C\nMalmö C"

    def test_selectticket(self):
        self.driver.find_element(By.CSS_SELECTOR, ".quick-link-item:nth-child(1) .page-button-text > span").click()

        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="buynsend"]/div[1]/div/div[1]/div/a'))).click()
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="stopAreaPicker"]'))).click()
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="stopAreaPicker"]'))).send_keys("malmö c")
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, "//*[@id='multiselect-dropdown']"))).click()

        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="offer"]'))).click()

        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="offer"]'))).click()
        self.driver.implicitly_wait(10)
        dropdown = self.driver.find_element(By.ID, "offer")
        dropdown.find_element(By.XPATH, "//option[. = '24 timmar']").click()
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.XPATH, '//*[@id="buynsend"]/div[1]/div/div[4]/div/div/div[1]/div[1]/div[2]/div/button[2]'))).click()

        self.driver.implicitly_wait(10)
        assert self.driver.find_element(By.XPATH,
                                        "//*[@id=\"buynsend\"]/div[1]/div/div[9]/div/div[2]/span").text == "62.00 kr"

    def test_compensation(self):
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".st-main-menu__item:nth-child(4) span").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR,
                                 "div:nth-child(1) > .page-navigation-block .page-button-text > span").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".standard-btn").click()
        assert self.driver.find_element(By.CSS_SELECTOR, "h1").text == "Ansökan om ersättning"

    # just checks if map exists, want to check if bus blips exists
    def test_showbusonmap(self):
        self.driver.find_element(By.CSS_SELECTOR, ".quick-link-item:nth-child(3) .page-button-text > span").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".sc-pbIaG").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".sc-pbIaG").send_keys("malmö")
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".sc-oTbqq:nth-child(4) .sc-pjSSY").click()
        self.driver.implicitly_wait(10)
        elements = self.driver.find_elements(By.XPATH,
                                             "/html/body/div[3]/div[2]/div[2]/section/div/div/div/div[1]/div[2]")
        assert len(elements) > 0

    def test_searchhelp(self):
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".st-main-menu__item:nth-child(4) span").click()
        element = self.driver.find_element(By.LINK_TEXT, "Kundservice")
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".humany-input").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".humany-input").send_keys("rullstol")
        self.driver.implicitly_wait(10)
        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(
            (By.PARTIAL_LINK_TEXT, "Vad gäller för resa med rullstol eller rullator"))).click()

        self.driver.implicitly_wait(10)
        self.driver.find_element(By.LINK_TEXT, "Buss").click()
        self.driver.implicitly_wait(10)
        self.driver.find_element(By.CSS_SELECTOR, ".sc-bdVaJa:nth-child(2)").click()
        assert self.driver.find_element(By.XPATH,
                                    '/html/body/div[3]/div[2]/div/div/div/div/div/div[2]/div/div/div[2]/div[1]/div['
                                    '1]/h1').text == "Vad gäller för resa med rullstol eller rullator?"


    # could create a login test but i dont want to put my number
    # kijogin429@asoflex.com
    # +46731298920
    # Test1289

    # try danish
